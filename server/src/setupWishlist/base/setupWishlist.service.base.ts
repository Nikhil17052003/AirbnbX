/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SetupWishlist as PrismaSetupWishlist,
  Listing as PrismaListing,
  User as PrismaUser,
} from "@prisma/client";

export class SetupWishlistServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SetupWishlistCountArgs, "select">
  ): Promise<number> {
    return this.prisma.setupWishlist.count(args);
  }

  async setupWishlists<T extends Prisma.SetupWishlistFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SetupWishlistFindManyArgs>
  ): Promise<PrismaSetupWishlist[]> {
    return this.prisma.setupWishlist.findMany<Prisma.SetupWishlistFindManyArgs>(
      args
    );
  }
  async setupWishlist<T extends Prisma.SetupWishlistFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SetupWishlistFindUniqueArgs>
  ): Promise<PrismaSetupWishlist | null> {
    return this.prisma.setupWishlist.findUnique(args);
  }
  async createSetupWishlist<T extends Prisma.SetupWishlistCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SetupWishlistCreateArgs>
  ): Promise<PrismaSetupWishlist> {
    return this.prisma.setupWishlist.create<T>(args);
  }
  async updateSetupWishlist<T extends Prisma.SetupWishlistUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SetupWishlistUpdateArgs>
  ): Promise<PrismaSetupWishlist> {
    return this.prisma.setupWishlist.update<T>(args);
  }
  async deleteSetupWishlist<T extends Prisma.SetupWishlistDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SetupWishlistDeleteArgs>
  ): Promise<PrismaSetupWishlist> {
    return this.prisma.setupWishlist.delete(args);
  }

  async getListings(parentId: string): Promise<PrismaListing | null> {
    return this.prisma.setupWishlist
      .findUnique({
        where: { id: parentId },
      })
      .listings();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.setupWishlist
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
