/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SetupWishlist } from "./SetupWishlist";
import { SetupWishlistCountArgs } from "./SetupWishlistCountArgs";
import { SetupWishlistFindManyArgs } from "./SetupWishlistFindManyArgs";
import { SetupWishlistFindUniqueArgs } from "./SetupWishlistFindUniqueArgs";
import { CreateSetupWishlistArgs } from "./CreateSetupWishlistArgs";
import { UpdateSetupWishlistArgs } from "./UpdateSetupWishlistArgs";
import { DeleteSetupWishlistArgs } from "./DeleteSetupWishlistArgs";
import { Listing } from "../../listing/base/Listing";
import { User } from "../../user/base/User";
import { SetupWishlistService } from "../setupWishlist.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SetupWishlist)
export class SetupWishlistResolverBase {
  constructor(
    protected readonly service: SetupWishlistService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SetupWishlist",
    action: "read",
    possession: "any",
  })
  async _setupWishlistsMeta(
    @graphql.Args() args: SetupWishlistCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SetupWishlist])
  @nestAccessControl.UseRoles({
    resource: "SetupWishlist",
    action: "read",
    possession: "any",
  })
  async setupWishlists(
    @graphql.Args() args: SetupWishlistFindManyArgs
  ): Promise<SetupWishlist[]> {
    return this.service.setupWishlists(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SetupWishlist, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SetupWishlist",
    action: "read",
    possession: "own",
  })
  async setupWishlist(
    @graphql.Args() args: SetupWishlistFindUniqueArgs
  ): Promise<SetupWishlist | null> {
    const result = await this.service.setupWishlist(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SetupWishlist)
  @nestAccessControl.UseRoles({
    resource: "SetupWishlist",
    action: "create",
    possession: "any",
  })
  async createSetupWishlist(
    @graphql.Args() args: CreateSetupWishlistArgs
  ): Promise<SetupWishlist> {
    return await this.service.createSetupWishlist({
      ...args,
      data: {
        ...args.data,

        listings: {
          connect: args.data.listings,
        },

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SetupWishlist)
  @nestAccessControl.UseRoles({
    resource: "SetupWishlist",
    action: "update",
    possession: "any",
  })
  async updateSetupWishlist(
    @graphql.Args() args: UpdateSetupWishlistArgs
  ): Promise<SetupWishlist | null> {
    try {
      return await this.service.updateSetupWishlist({
        ...args,
        data: {
          ...args.data,

          listings: {
            connect: args.data.listings,
          },

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SetupWishlist)
  @nestAccessControl.UseRoles({
    resource: "SetupWishlist",
    action: "delete",
    possession: "any",
  })
  async deleteSetupWishlist(
    @graphql.Args() args: DeleteSetupWishlistArgs
  ): Promise<SetupWishlist | null> {
    try {
      return await this.service.deleteSetupWishlist(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Listing, {
    nullable: true,
    name: "listings",
  })
  @nestAccessControl.UseRoles({
    resource: "Listing",
    action: "read",
    possession: "any",
  })
  async getListings(
    @graphql.Parent() parent: SetupWishlist
  ): Promise<Listing | null> {
    const result = await this.service.getListings(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: SetupWishlist): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
